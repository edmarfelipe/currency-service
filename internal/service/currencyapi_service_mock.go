// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/currencyapi_service_mock.go

// Package mock is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockCurrencyService) GetRate(ctx context.Context, currency string) ([]SymbolValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", ctx, currency)
	ret0, _ := ret[0].([]SymbolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockCurrencyServiceMockRecorder) GetRate(ctx, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockCurrencyService)(nil).GetRate), ctx, currency)
}
